from sklearn.linear_model import LogisticRegression
import numpy as np
import pandas as pd

"""
create class2 with 0 = nonevent and 1 = event
"""
def to01(row):
    if row['class4'] == "nonevent":
        return 0
    else:
        return 1
df = pd.read_csv("npf_train.csv")

"""
gather data rows
"""
X = np.array(df)
X = np.delete(X, 0, 1)
X = np.delete(X, 0, 1)
X = np.delete(X, 0, 1)
X = np.delete(X, 0, 1)
df['class2'] = df.apply(lambda row:  to01(row) , axis=1)

"""
gather result rows
"""
y = np.array(df['class2'])

"""
use sklear logistic regression
"""
clf = LogisticRegression(random_state=0).fit(X, y)
clf.predict(X[:2, :])

clf.predict_proba(X[:2, :])

"""
this is an event day
"""
test_1 = np.array([368.569446808511,1.90732598884253,368.706144067797,1.76957260268618,368.879787234043,2.19934944670586,368.707744680851,1.65675579479711,349.232768313459,289.715679836819,6.8336170212766,0.286338702763862,6.75207627118644,0.298845171804972,6.93731914893617,0.27892506624624,6.70336170212766,0.302601570539244,6.69076595744681,0.309351832225234,6.90102127659575,0.283693247222649,211.179047619047,235.730919665772,-0.00263829787234043,0.0492926137962693,-0.00326271186440678,0.0505201755301109,-0.00885106382978724,0.0540334569998918,-0.00863829787234043,0.0527031784879376,-0.00863829787234043,0.0491450084987096,-0.00527659574468085,0.0462276520864012,0.662468085106384,0.100901248809293,0.654576271186442,0.117839732979119,0.677106382978724,0.122986906752661,0.641872340425533,0.105631519071829,0.642170212765958,0.0951066246330919,0.676808510638299,0.109542685411941,38.232085106383,2.03269670392852,37.6254468085106,2.15388500919672,38.7868510638298,1.9980108375039,38.6974468085107,2.01177481289522,37.8363829787234,2.070815134865,982.860178571428,0.39188693821127,660.860868824531,550.084151998331,-0.00413265306122446,0.00818484880076877,44.8960884353745,31.6645409279213,53.6258723404255,8.23185248184021,53.5641949152542,7.97912610450755,53.4785957446809,8.79891932870016,53.8440425531915,7.76746712601585,54.9826382978723,7.82579898552057,53.5617021276595,8.46482286584954,21.9323554421769,17.2876543964841,0.00306034482758621,0.0892616940372039,923.012987012987,0.525494916934291,10.4700425170068,1.74867903892323,10.7724149659864,1.95633424927611,10.1009353741497,1.58088576601273,9.74619047619054,1.54737326730457,10.6526530612245,1.84173801413842,18.4573848797251,14.9702127584182,0.777402658662093,0.780243909691675,0.00131558068965517,0.000334687795154839
]).reshape(-1, 100)
"""
this is an nonevent day
"""
test_0 = np.array([375.497688888889,2.98129376145046,375.151244444444,2.16954534773375,377.234646017699,3.41240783135203,374.657466666666,1.59230860029439,90.8194924309884,65.8791128560844,11.8937777777778,2.87991791246551,11.7115111111111,2.93788317122682,12.2337610619469,2.8351580815008,11.5972444444444,2.9743913629781,11.5307555555556,3.05405422257766,12.0774336283186,2.87667733602071,58.1397033374537,73.9058865483396,0.0484888888888889,0.0650372908902977,0.0485777777777778,0.0713062086835739,0.0188938053097345,0.0579664060307514,0.0489777777777778,0.0738865228168727,0.0499555555555555,0.0669387898553715,0.0401769911504425,0.0632593575108408,2.61475555555555,0.864397012052011,2.62897777777777,0.898750782060282,2.5091592920354,0.874454090696303,2.62546666666667,0.914864295167009,2.59235555555556,0.922080459079289,2.58867256637168,0.863668665300432,33.7393333333333,2.26106683100826,29.94,2.84700887872791,36.9009777777778,3.41657474208511,37.2499111111111,3.72529936370305,32.2378761061946,2.34208490265592,986.253371783496,1.82969860062126,174.690302760463,126.495536851709,0.0115173025732031,0.0214713120306971,11.806876663709,9.68401913712406,87.2445777777777,11.9780255991532,85.1230222222222,13.1197055554274,90.4003982300884,10.6818611911677,83.9649777777778,14.5599677480892,84.4178222222222,16.2309008135178,88.8940707964602,11.478259925203,6.52377107364675,5.47842550997344,0.00800000000000001,0.146940697655384,878.851351351351,91.9849127641649,11.0401863354037,2.23353208971773,10.9493167701863,2.47154016994377,11.2717391304348,1.71575579028213,11.1281366459627,1.54457041541247,11.0108873114463,2.38652852380349,5.69365911151406,3.43678607406663,0.218610931899642,0.153833743190704,0.00646792123893805,0.00154633250810306
]).reshape(-1, 100)

"""
print model accuracy
"""
print(clf.score(X, y))

"""
test with some values, should print first 1 then 0
"""
print(clf.predict(test_1))
print(clf.predict(test_0))
